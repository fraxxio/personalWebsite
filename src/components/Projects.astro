---
import ProjectCard from '../components/ProjectCard.astro';
import { getCollection, getEntry } from 'astro:content';

const projects = await getCollection('projects');
const featured = await getEntry('projects', 'cineradar');
---

<section id='projects' class='mb-40 mt-20 max-[1580px]:mt-0'>
  <div class='scroller py-40 max-sm:py-20' data-speed='slow'>
    <ul
      class='tag-list scroller__inner text-8xl font-semibold uppercase hide max-md:text-6xl max-sm:text-4xl'
    >
      <li>Projects</li>
      <li>Projects</li>
      <li>Projects</li>
      <li>Projects</li>
      <li>Projects</li>
      <li>Projects</li>
      <li>Projects</li>
    </ul>
  </div>
  <div class='mx-[20%] max-md:mx-4'>
    <div class='hide col-span-2 max-[1580px]:col-span-1'>
      <ProjectCard
        title={featured.data.title}
        description={featured.data.description}
        tags={featured.data.tags}
        thumbnail={featured.data.thumbnail}
        slug={featured.slug}
      />
    </div>
    <div class='hide grid grid-cols-2 gap-x-8 max-[1580px]:grid-cols-1'>
      {
        projects.map(
          (project) =>
            !project.data.featured && (
              <ProjectCard
                title={project.data.title}
                description={project.data.description}
                tags={project.data.tags}
                thumbnail={project.data.thumbnail}
                slug={project.slug}
              />
            )
        )
      }
    </div>
  </div>
</section>

<script>
  const scroller = document.querySelector('.scroller') as HTMLElement;
  if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
    addAnimation();
  }

  function addAnimation() {
    scroller.setAttribute('data-animated', 'true');

    const scrollerInner = scroller.querySelector('.scroller__inner') as HTMLElement;
    const scrollerContent = Array.from(scrollerInner.children);

    scrollerContent.forEach((item) => {
      const duplicatedItem = item.cloneNode(true) as HTMLElement;
      duplicatedItem.setAttribute('aria-hidden', 'true');
      scrollerInner.appendChild(duplicatedItem);
    });
  }

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('show');
      }
    });
  });

  const hiddenElements = document.querySelectorAll('.hide');
  hiddenElements.forEach((element) => observer.observe(element));
</script>

<style>
  .scroller {
    width: 100%;
  }

  .scroller__inner {
    padding-block: 1rem;
    display: flex;
    flex-wrap: wrap;
    gap: 3rem;
  }

  .scroller[data-animated='true'] {
    overflow: hidden;
  }

  .scroller[data-animated='true'] .scroller__inner {
    width: max-content;
    flex-wrap: nowrap;
    animation: scroll linear;
    animation-timeline: scroll(root);
  }

  @keyframes scroll {
    to {
      transform: translate(calc(-50% - 0.5rem));
    }
  }

  .hide {
    opacity: 0;
    transition: all 800ms;
  }

  .show {
    opacity: 1;
  }

  @media (prefers-reduced-motion) {
    .scroller {
      animation: none;
    }
    .hide {
      transition: none;
    }
  }
</style>
