---
import FrontEnd from '../components/badges/FrontEnd.astro';
import Tailwind from '../components/badges/Tailwind.astro';
import Typescript from '../components/badges/Typescript.astro';
import NextJS from '../components/badges/NextJS.astro';
import Artillery from '../components/badges/Artillery.astro';
import Auth from './badges/Auth.astro';
import Docker from './badges/Docker.astro';
import Drizzle from './badges/Drizzle.astro';
import Express from './badges/Express.astro';
import FullStack from './badges/FullStack.astro';
import OpenAI from './badges/OpenAI.astro';
import Zod from './badges/Zod.astro';
import React from './badges/React.astro';
import Socket from './badges/Socket.astro';
import SQLite from './badges/SQLite.astro';
import Uploadthing from './badges/Uploadthing.astro';
import reCAPTCHA from './badges/reCAPTCHA.astro';
import shadcn from './badges/shadcn.astro';

import { Image } from 'astro:assets';

const tagsMap: Record<string, any> = {
  FrontEnd: FrontEnd,
  Typescript: Typescript,
  Tailwind: Tailwind,
  NextJS: NextJS,
  Artillery: Artillery,
  Auth: Auth,
  Docker: Docker,
  Drizzle: Drizzle,
  Express: Express,
  FullStack: FullStack,
  OpenAI: OpenAI,
  React: React,
  reCAPTCHA: reCAPTCHA,
  shadcn: shadcn,
  Socket: Socket,
  SQLite: SQLite,
  Uploadthing: Uploadthing,
  Zod: Zod,
};
const { title, description, tags, thumbnail, slug, link } = Astro.props;
---

<div class='border-b-2 border-black cursor-pointer mb-16'>
  <a href={`/projects/${slug}`}>
    <div class='overflow-hidden border-2 border-black rounded-md'>
      <Image
        id='project1'
        src={thumbnail}
        alt={`${title} thumbnail`}
        width='1100'
        height='1000'
        class='hover:animate-hover-project object-cover w-full'
      />
    </div>
    <div class='flex gap-3 pt-3 flex-wrap'>
      {
        tags.map((tag: string) => {
          const Component = tagsMap[tag];
          return Component ? <Component /> : <p>{tag}</p>;
        })
      }
      <div class='circle' id='circle'>
        <svg
          xmlns='http://www.w3.org/2000/svg'
          width='24'
          height='24'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'
          stroke-linecap='round'
          stroke-linejoin='round'><path d='M5 12h14'></path><path d='m12 5 7 7-7 7'></path></svg
        >
      </div>
    </div>
    <div class='flex items-center justify-between'>
      <div>
        <h2 class='pt-4 font-semibold text-3xl max-md:text-xl'>{title}</h2>
        <p class='text-lg max-md:text-base pb-4'>{description}</p>
      </div>
      <a
        href={link}
        rel='noopener nofollow'
        target='_blank'
        class='p-4 max-md:p-3 border-2 border-black rounded-md hover:bg-black hover:text-white transition'
      >
        <svg
          xmlns='http://www.w3.org/2000/svg'
          class='w-[24px] h-[24px] max-md:w-[18px] max-md:h-[18px]'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'
          stroke-linecap='round'
          stroke-linejoin='round'
          ><path d='M15 3h6v6'></path><path d='M10 14 21 3'></path><path
            d='M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6'></path></svg
        >
      </a>
    </div>
  </a>
</div>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const circle = document.getElementById('circle') as HTMLElement;
    const projectElements = document.querySelectorAll('#project1');

    document.addEventListener('mousemove', (e) => {
      circle.style.transform = `translate(${e.clientX - 45}px, ${e.clientY - 45}px)`;
    });

    projectElements.forEach((project) => {
      project.addEventListener('mouseenter', () => {
        circle.style.opacity = '1';
      });

      project.addEventListener('mouseleave', () => {
        circle.style.opacity = '0';
      });
    });
  });
</script>

<style>
  .circle {
    position: fixed;
    top: 0;
    left: 0;
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 80px;
    height: 80px;
    border-radius: 50%;
    backdrop-filter: invert(1) grayscale(1);
    -webkit-backdrop-filter: invert(1) grayscale(1);
    transform: translate(0, 0);
    transition-duration: 0.2s;
    transition-timing-function: ease-out;
    z-index: 5;
    opacity: 0;
  }
</style>
