---
import PrimaryBtn from "../components/PrimaryBtn.astro";
---

<header class='flex justify-center relative overflow-hidden' id='home'>
  <div transition:persist id='grainedContainer'></div>
  <div id='cursor-glow' class='max-[520px]:hidden cursor-glow'></div>
  <div id='cursor-glow2' class='max-[520px]:hidden cursor-glow'></div>
  <div id='cursor-glow3' class='max-[520px]:hidden cursor-glow'></div>
  <div id='cursor-glow4' class='max-[520px]:hidden cursor-glow'></div>
  <div class='absolute container text-center font-semibold pt-[15rem]'>
    <p class='flex justify-center text-2xl pb-4 z-0 gap-2 max-md:text-xl max-sm:text-lg'>
      <span id='hand' class='wave-animation animate-waving-hand cursor-pointer'>üëãüèº </span>
      Hi, my name is Rokas
    </p>
    <h1
      class='text-9xl max-lg:text-8xl max-md:text-7xl max-sm:text-6xl max-[550px]:text-5xl max-[380px]:text-3xl z-0'
    >
      I'm self-taught web developer that creates full-stack web apps
    </h1>
    <PrimaryBtn />
  </div>
  <div id='gradient' class='h-20 w-full absolute bottom-0'></div>
</header>

<script>
  import grained from "../lib/grained";
  var options = {
    animate: true,
    patternWidth: 100,
    patternHeight: 100,
    grainOpacity: 0.13,
    grainDensity: 1,
    grainWidth: 1,
    grainHeight: 1,
  };

  grained("#grainedContainer", options);

  const header = document.getElementById("home") as HTMLElement;
  const cursor = document.getElementById("cursor-glow") as HTMLElement;
  const cursor2 = document.getElementById("cursor-glow2") as HTMLElement;
  const cursor3 = document.getElementById("cursor-glow3") as HTMLElement;
  const cursor4 = document.getElementById("cursor-glow4") as HTMLElement;

  header.addEventListener("mousemove", (event) => {
    const cursors = [cursor, cursor2, cursor3, cursor4];

    const keyframesArray = cursors.map((cursor) => ({
      transform: `translate(${event.clientX - cursor.offsetWidth / 2}px, ${event.clientY - cursor.offsetHeight / 2}px)`,
    }));

    cursors.forEach((cursor, index) => {
      cursor.style.display = "block";
      cursor.animate(keyframesArray[index], {
        duration: 800 - 100 * index,
        fill: "forwards",
      });
    });

    if (event.target instanceof Element) {
      const interactable = event.target.closest(".interactable");
      const interacting = interactable !== null;

      if (interacting) {
        cursors.forEach((cursor) => {
          cursor.style.display = "none";
          ``;
        });
      } else {
        cursors.forEach((cursor) => {
          cursor.style.display = "block";
        });
      }
    }
  });

  const hand = document.getElementById("hand") as HTMLElement;
  hand.addEventListener("click", () => {
    hand.classList.remove("wave-animation");
    hand.classList.add("animate-ping");
    setTimeout(() => {
      hand.classList.remove("animate-ping");
      hand.classList.add("wave-animation");
    }, 1000);
  });
</script>

<style>
  #grainedContainer {
    width: 100vw;
    height: 105vh;
    background: radial-gradient(
      circle at 50% -20%,
      rgba(68, 0, 255, 0.8) 5%,
      rgba(244, 228, 54, 0.363) 30%,
      rgba(248, 242, 242, 1) 60%
    );
    z-index: -1;
  }
  #gradient {
    background: linear-gradient(to top, #d1f1a0 0%, rgba(0, 0, 0, 0) 100%);
  }
  .cursor-glow {
    display: none;
    height: 50px;
    width: 50px;
    border-radius: 50%;
    position: absolute;
    border: 2px solid rgba(0, 0, 0, 0.308);
    top: 0;
    left: 0;
    z-index: 20;
    pointer-events: none;
  }

  @keyframes wave {
    0% {
      transform: rotate(0deg);
    }
    10% {
      transform: rotate(14deg);
    }
    20% {
      transform: rotate(-8deg);
    }
    30% {
      transform: rotate(14deg);
    }
    40% {
      transform: rotate(-4deg);
    }
    50% {
      transform: rotate(10deg);
    }
    60% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(0deg);
    }
  }
  .wave-animation {
    animation: wave 3s linear infinite;
  }

  @keyframes fade-up {
    0% {
      opacity: 0;
      transform: translateY(30px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  h1,
  p {
    opacity: 0; /* Set initial opacity to 0 */
  }

  h1 {
    animation: fade-up 800ms ease-out forwards;
    animation-delay: 1s;
  }

  p {
    animation: fade-up 800ms ease-out forwards;
    animation-delay: 700ms;
  }

  @media (prefers-reduced-motion) {
    h1,
    p {
      animation: none;
    }
  }
</style>
